/*
 *  Xen base ring buffer
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef INCLUDE_RINGBUFFERBASE_HPP_
#define INCLUDE_RINGBUFFERBASE_HPP_

#include <atomic>
#include <mutex>

extern "C" {
#include "xenctrl.h"
#include <xen/io/ring.h>
}

#include "XenEvtchn.hpp"
#include "XenException.hpp"
#include "XenGnttab.hpp"
#include "Log.hpp"

namespace XenBackend {

/***************************************************************************//**
 * Exception generated by RingBufferBase.
 * @ingroup Backend
 ******************************************************************************/
class RingBufferException : public XenException
{
	using XenException::XenException;
};

/***************************************************************************//**
 * Interface to implement custom ring buffer.
 * @ingroup Backend
 ******************************************************************************/
class RingBufferBase
{
public:

	/**
	 * @param domId frontend domain id
	 * @param port  event channel port number
	 * @param ref   grant table reference
	 */
	RingBufferBase(int domId, int port, int ref);
	virtual ~RingBufferBase();

	/**
	 * Starts ring buffer handling.
	 */
	void start();

	/**
	 * Stops ring buffer handling.
	 */
	void stop();

	/**
	 * Returns whether ring buffer is terminated.
	 */
	bool isTerminated() const { return mTerminated; }

	/**
	 * Returns event channel port.
	 */
	int getPort() const { return mPort; }

	/**
	 * Returns grant table reference.
	 */
	int getRef() const { return mRef; }

protected:

	/**
	 * Is called when the notification from associated event channel is
	 * received.
	 * This method should be reimplemented in derived classes.
	 */
	virtual void onReceiveIndication() = 0;

	/**
	 * Event channel.
	 */
	XenEvtchn mEventChannel;

	/**
	 * Grant table buffer.
	 */
	XenGnttabBuffer mBuffer;

private:

	int mPort;
	int mRef;

	std::atomic_bool mTerminated;

	Log mLog;

	void onError(const std::exception& e);
	void onIndication();
};

/***************************************************************************//**
 * Base class to create the custom input ring buffer (for handling requests
 * from the frontend).
 * In order to create the ring buffer the client should implement a class
 * inherited from RingBufferInBase and override processRequest() method.
 * @code
 * class MyRingBuffer : public XenBackend::RingBufferInBase<
 *                                         my_back_ring,
 *                                         my_sring,
 *                                         my_req,
 *                                         my_resp>
 * {
 * public:
 *     MyRingBuffer(int domId, int port, int ref) :
 *         RingBufferInBase<my_back_ring, my_sring, my_req, my_resp>
 *             (domId, port, ref) {}
 * private:
 *     void processRequest(const my_req& req)
 *     {
 *         switch(eq.u.data.operation)
 *         {
 *             ...
 *         }
 *     }
 * };
 *
 * @endcode
 * @ingroup Backend
 ******************************************************************************/
template<typename Ring, typename Page, typename Req, typename Rsp>
class RingBufferInBase : public RingBufferBase
{
public:

	/**
	 * @param[in] domId    frontend domain id
	 * @param[in] port     event channel port number
	 * @param[in] ref      ring buffer ref number
	 * @param[in] pageSize ring buffer page size
	 */
	RingBufferInBase(int domId, int port, int ref, int pageSize = 4096) :
		RingBufferBase(domId, port, ref)
	{
		BACK_RING_INIT(&mRing, static_cast<Page*>(mBuffer.get()), pageSize);
	}

protected:

	/**
	 * Processes frontend requests.
	 * This function is called when the request from the frontend is received
	 * and should be implemented in a derived class.
	 * @param req request
	 */
	virtual void processRequest(const Req& req) = 0;

	/**
	 * Sends the response to the frontend
	 * @param rsp response
	 */
	void sendResponse(const Rsp& rsp)
	{
		bool notify = false;

		*RING_GET_RESPONSE(&mRing, mRing.rsp_prod_pvt) = rsp;

		mRing.rsp_prod_pvt++;

		RING_PUSH_RESPONSES_AND_CHECK_NOTIFY(&mRing, notify);

		if (notify)
		{
			mEventChannel.notify();
		}
	}

private:
	Ring mRing;

	void onReceiveIndication()
	{
		int numPendingRequests = 0;

		do {
			Req req;

			auto rc = mRing.req_cons;
			auto rp = mRing.sring->req_prod;

			xen_rmb();

			if (RING_REQUEST_PROD_OVERFLOW(&mRing, rp))
			{
				throw RingBufferException("Ring buffer producer overflow");
			}

			while (rc != rp) {

				if (RING_REQUEST_CONS_OVERFLOW(&mRing, rc))
				{
					throw RingBufferException("Ring buffer consumer overflow");
				}

				req = *RING_GET_REQUEST(&mRing, rc);

				mRing.req_cons = ++rc;

				xen_mb();

				processRequest(req);
			}

			RING_FINAL_CHECK_FOR_REQUESTS(&mRing, numPendingRequests);

		} while (numPendingRequests);
	}
};

/***************************************************************************//**
 * Base class to create the custom output ring buffer (for sending events
 * to the frontend).
 * In order to create the ring buffer the client should implement a class
 * inherited from RingBufferOutBase.
 * @code
 * class MyRingBuffer : public XenBackend::RingBufferBase<
 *                                         my_back_ring,
 *                                         my_sring,
 *                                         my_req,
 *                                         my_resp>
 * {
 * public:
 *     MyRingBuffer(int domId, int port, int ref) :
 *         RingBufferInBase<my_back_ring, my_sring, my_req, my_resp>
 *             (domId, port, ref) {}
 * private:
 *     void processRequest(const my_req& req)
 *     {
 *         switch(eq.u.data.operation)
 *         {
 *             ...
 *         }
 *     }
 * };
 *
 * @endcode
 * @ingroup Backend
 ******************************************************************************/
template<typename Page,typename Event>
class RingBufferOutBase : public RingBufferBase
{
public:

	/**
	 * @param[in] domId    frontend domain id
	 * @param[in] port     event channel port number
	 * @param[in] ref      ring buffer ref number
	 * @param[in] offset   start of the ring buffer inside mapped page
	 * @param[in] size     size of the ring buffer
	 */
	RingBufferOutBase(int domId, int port, int ref, int offset, size_t size) :
		RingBufferBase(domId, port, ref),
		mPage(static_cast<Page*>(mBuffer.get())),
		mEventBuffer(reinterpret_cast<Event*>(
				static_cast<uint8_t*>(mBuffer.get()) + offset)),
		mNumEvents(size/sizeof(Event))
	{
		xen_mb();

		mPage->in_prod = 0;

		xen_wmb();
	}

	/**
	 * Sends the event to the frontend
	 * @param event event to the frontend
	 */
	void sendEvent(const Event& event)
	{
		std::lock_guard<std::mutex> lock(mMutex);

		xen_mb();

		mEventBuffer[mPage->in_prod % mNumEvents] = event;

		mPage->in_prod++;

		xen_wmb();

		mEventChannel.notify();
	}

private:
	Page* mPage;
	Event* mEventBuffer;
	int mNumEvents;

	std::mutex mMutex;

	void onReceiveIndication() {}
};

typedef std::shared_ptr<RingBufferBase> RingBufferPtr;

}

#endif /* INCLUDE_RINGBUFFERBASE_HPP_ */
